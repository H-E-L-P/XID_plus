{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpyro\n",
    "import numpyro.distributions as dist\n",
    "from numpyro import handlers\n",
    "import jax.numpy as jnp\n",
    "import jax\n",
    "import pylab as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def model(params_mu,params_sig,y,c):\n",
    "    n_src,n_param=params_mu.shape\n",
    "    L_Rho = numpyro.sample('L_Rho', dist.LKJCholesky(3, concentration=c))\n",
    "    scale_tril = params_sig[0,:, jnp.newaxis] * L_Rho\n",
    "    with numpyro.plate('src',n_src):\n",
    "        params=numpyro.sample('params',dist.Normal(jnp.zeros((n_param,1)), jnp.ones((n_param,1)))).T\n",
    "    return L_Rho,params\n",
    "\n",
    "def transform(params,params_sig,params_mu):\n",
    "    scale_tril = params_sig[..., jnp.newaxis] * L_Rho\n",
    "    v = params_mu+jnp.dot(scale_tril, params).T\n",
    "    return v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.05 [[ 1.          0.11668614  0.851299  ]\n",
      " [ 0.11668614  1.         -0.3125015 ]\n",
      " [ 0.8512989  -0.3125015   1.        ]]\n"
     ]
    }
   ],
   "source": [
    "params_mu=jnp.full((100,3),10)\n",
    "params_sig=jnp.ones((100,3))\n",
    "for c in [0.05]:\n",
    "    L_Rho,params=handlers.seed(model, rng_seed=0)(params_mu,params_sig,None,c)\n",
    "    new_params=jax.vmap(transform)(params,params_sig,params_mu)\n",
    "    print(c,jnp.corrcoef(new_params.T))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpyro.infer.reparam import TransformReparam\n",
    "with handlers.seed(rng_seed=0): \n",
    "    with numpyro.plate('n_src', 10):\n",
    "        with numpyro.handlers.reparam(config={\"params\":TransformReparam()}):\n",
    "            params = numpyro.sample('params', dist.TransformedDistribution(dist.Normal(0.0,1.0),dist.transforms.AffineTransform(jnp.ones((10,2)).T,jnp.ones((10,2)).T)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeviceArray([[ 1.5199829 ,  0.7265288 ,  1.3115745 ,  1.7302203 ,\n",
       "               3.0017805 ,  1.4927709 ,  1.4523036 ,  1.884373  ,\n",
       "               1.0006878 ,  0.2674694 ],\n",
       "             [ 1.8331263 ,  0.47367555,  0.6601328 ,  0.5734397 ,\n",
       "               1.6678789 , -0.13601577,  0.69445187, -0.9193239 ,\n",
       "              -1.1068289 ,  1.579773  ]], dtype=float32)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 10)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jnp.stack((jnp.arange(0,10.0),jnp.full(10,0.5))).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "with handlers.seed(rng_seed=0): \n",
    "    with numpyro.plate('n_src', 10):\n",
    "        numpyro.sample('trunc_z',dist.TruncatedNormal(jnp.array([0.0]),jnp.full(10,4.0),jnp.full(10,4.0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeviceArray([10., 10., 10., 10.], dtype=float32)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jnp.full(4,10.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10,)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
